#!/usr/bin/env python3
"""
Mesh Visualization Tool for e2e3d

This script provides a simple way to visualize 3D meshes generated by the e2e3d
reconstruction pipeline using Open3D.

Usage:
    python visualize_mesh.py <mesh_file_path>
"""

import os
import sys
import argparse
import open3d as o3d
import numpy as np


def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="Visualize 3D meshes from e2e3d")
    parser.add_argument("mesh_file", help="Path to the mesh file (.obj, .ply, .stl)")
    parser.add_argument("--point_cloud", "-p", help="Optional point cloud file to overlay (.ply, .pcd)")
    parser.add_argument("--color", "-c", default="0.8,0.8,0.8", help="Mesh color as R,G,B (default: 0.8,0.8,0.8)")
    parser.add_argument("--point_size", "-s", type=float, default=2.0, help="Point size for point cloud (default: 2.0)")
    return parser.parse_args()


def load_mesh(mesh_path):
    """Load a mesh file using Open3D."""
    print(f"Loading mesh from {mesh_path}...")
    
    if not os.path.exists(mesh_path):
        print(f"Error: File {mesh_path} does not exist.")
        sys.exit(1)
    
    file_extension = os.path.splitext(mesh_path)[1].lower()
    
    try:
        if file_extension == '.obj':
            mesh = o3d.io.read_triangle_mesh(mesh_path)
        elif file_extension == '.ply':
            mesh = o3d.io.read_triangle_mesh(mesh_path)
        elif file_extension == '.stl':
            mesh = o3d.io.read_triangle_mesh(mesh_path)
        else:
            print(f"Error: Unsupported file format {file_extension}. Supported formats: .obj, .ply, .stl")
            sys.exit(1)
    except Exception as e:
        print(f"Error loading mesh: {e}")
        sys.exit(1)
    
    print(f"Mesh loaded successfully with {len(mesh.vertices)} vertices and {len(mesh.triangles)} triangles.")
    return mesh


def load_point_cloud(point_cloud_path):
    """Load a point cloud file using Open3D."""
    if not point_cloud_path:
        return None
    
    print(f"Loading point cloud from {point_cloud_path}...")
    
    if not os.path.exists(point_cloud_path):
        print(f"Warning: Point cloud file {point_cloud_path} does not exist. Continuing without point cloud.")
        return None
    
    file_extension = os.path.splitext(point_cloud_path)[1].lower()
    
    try:
        if file_extension in ['.ply', '.pcd', '.xyz']:
            pcd = o3d.io.read_point_cloud(point_cloud_path)
        else:
            print(f"Warning: Unsupported point cloud format {file_extension}. Supported formats: .ply, .pcd, .xyz")
            return None
    except Exception as e:
        print(f"Warning: Error loading point cloud: {e}. Continuing without point cloud.")
        return None
    
    print(f"Point cloud loaded successfully with {len(pcd.points)} points.")
    return pcd


def visualize(mesh, point_cloud=None, color=[0.8, 0.8, 0.8], point_size=2.0):
    """Visualize the mesh and optional point cloud."""
    # Prepare mesh for visualization
    if not mesh.has_vertex_normals():
        print("Computing vertex normals...")
        mesh.compute_vertex_normals()
    
    # Set mesh color if it doesn't have vertex colors
    if not mesh.has_vertex_colors():
        print(f"Setting mesh color to RGB: {color}")
        mesh.paint_uniform_color(color)
    
    # Create visualization
    vis = o3d.visualization.Visualizer()
    vis.create_window(window_name="e2e3d Mesh Viewer", width=1024, height=768)
    
    # Add mesh to visualization
    vis.add_geometry(mesh)
    
    # Add point cloud if provided
    if point_cloud is not None:
        # Set point cloud rendering options
        if not point_cloud.has_colors():
            point_cloud.paint_uniform_color([1, 0, 0])  # Red points
        
        # Add point cloud to visualization
        vis.add_geometry(point_cloud)
    
    # Set visualization options
    opt = vis.get_render_option()
    opt.background_color = np.array([0.1, 0.1, 0.1])  # Dark background
    opt.point_size = point_size
    opt.show_coordinate_frame = True
    
    # Set camera view
    vis.get_view_control().set_zoom(0.8)
    
    # Run visualization
    print("\nVisualization controls:")
    print("  Left mouse button: Rotate")
    print("  Right mouse button: Pan")
    print("  Mouse wheel: Zoom")
    print("  H: Show help")
    print("  Q/ESC: Exit")
    
    vis.run()
    vis.destroy_window()


def main():
    """Main function."""
    args = parse_args()
    
    # Parse color
    try:
        color = [float(c) for c in args.color.split(',')]
        if len(color) != 3:
            raise ValueError("Color must have 3 components (R,G,B)")
    except Exception as e:
        print(f"Error parsing color: {e}. Using default color.")
        color = [0.8, 0.8, 0.8]
    
    # Load mesh
    mesh = load_mesh(args.mesh_file)
    
    # Load point cloud if specified
    point_cloud = load_point_cloud(args.point_cloud)
    
    # Visualize
    visualize(mesh, point_cloud, color, args.point_size)


if __name__ == "__main__":
    main() 