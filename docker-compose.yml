version: '3.8'

x-airflow-common: &airflow-common
  image: e2e3d-airflow:latest
  platform: ${DOCKER_PLATFORM:-linux/arm64}
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
    - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
    - PROJECT_PATH=/opt/airflow/data
    - COLMAP_PATH=colmap
    - USE_GPU=${USE_GPU:-auto}
    - QUALITY_PRESET=${QUALITY_PRESET:-medium}
    - S3_ENABLED=${S3_ENABLED:-true}
    - S3_ENDPOINT=${S3_ENDPOINT:-http://minio:9000}
    - S3_BUCKET=${S3_BUCKET:-models}
    - S3_ACCESS_KEY=${S3_ACCESS_KEY:-minioadmin}
    - S3_SECRET_KEY=${S3_SECRET_KEY:-minioadmin}
    - S3_REGION=${S3_REGION:-us-east-1}
    - SLACK_WEBHOOK=${SLACK_WEBHOOK:-}
    - ENABLE_EMAIL=${ENABLE_EMAIL:-false}
    - NOTIFICATION_EMAIL=${NOTIFICATION_EMAIL:-}
    - PYTHONPATH=/opt/airflow:/opt/airflow/dags:/opt/airflow/plugins
    - PYTHONWARNINGS="ignore::DeprecationWarning"
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/logs:/opt/airflow/logs
    - ./src:/opt/airflow/src
    - ${DATA_DIR:-./data}:/opt/airflow/data

services:
  # Build services first
  build-base:
    build:
      context: .
      dockerfile: docker/base/Dockerfile
    image: e2e3d-base:latest
    command: echo "Base image built successfully"

  build-colmap:
    build:
      context: .
      dockerfile: docker/colmap/Dockerfile
    image: e2e3d-colmap:latest
    depends_on:
      - build-base
    command: echo "COLMAP image built successfully"

  build-airflow:
    build:
      context: .
      dockerfile: docker/airflow/Dockerfile
    image: e2e3d-airflow:latest
    command: echo "Airflow image built successfully"

  # System initialization
  init-system:
    image: alpine:latest
    volumes:
      - ./:/workspace
      - ${DATA_DIR:-./data}:/data
    entrypoint: /bin/sh
    command: >
      -c "
        echo 'Creating necessary directories...'
        mkdir -p /data/input /data/output /data/videos
        mkdir -p /workspace/airflow/dags /workspace/airflow/logs /workspace/airflow/plugins
        chmod -R 777 /data /workspace/airflow
        
        # Create a sample .env file if it doesn't exist
        if [ ! -f /workspace/.env ]; then
          echo 'Creating .env file...'
          echo 'DATA_DIR=./data' > /workspace/.env
          echo 'DOCKER_PLATFORM=linux/arm64' >> /workspace/.env
          echo 'USE_GPU=auto' >> /workspace/.env
          echo 'QUALITY_PRESET=medium' >> /workspace/.env
          echo 'S3_ENABLED=true' >> /workspace/.env
          echo 'S3_ENDPOINT=http://minio:9000' >> /workspace/.env
          echo 'S3_BUCKET=models' >> /workspace/.env
          echo 'S3_ACCESS_KEY=minioadmin' >> /workspace/.env
          echo 'S3_SECRET_KEY=minioadmin' >> /workspace/.env
          echo 'S3_REGION=us-east-1' >> /workspace/.env
        fi
        
        echo 'System initialization complete!'
      "

  # Database
  postgres:
    image: postgres:15-alpine
    platform: ${DOCKER_PLATFORM:-linux/arm64}
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5

  # Airflow services
  airflow-webserver:
    <<: *airflow-common
    depends_on:
      postgres:
        condition: service_healthy
      init-system:
        condition: service_completed_successfully
      build-airflow:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    <<: *airflow-common
    depends_on:
      postgres:
        condition: service_healthy
      init-system:
        condition: service_completed_successfully
      build-airflow:
        condition: service_completed_successfully
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-init:
    image: e2e3d-airflow:latest
    platform: ${DOCKER_PLATFORM:-linux/arm64}
    depends_on:
      postgres:
        condition: service_healthy
      build-airflow:
        condition: service_completed_successfully
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - PYTHONWARNINGS="ignore::DeprecationWarning"
    entrypoint: /bin/bash
    command: -c 'airflow db init && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com'

  # Storage service
  minio:
    image: minio/minio:RELEASE.2023-10-25T06-33-25Z
    platform: ${DOCKER_PLATFORM:-linux/arm64}
    container_name: e2e3d-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_CONSOLE_ADDRESS=:9001
    volumes:
      - ${DATA_DIR:-./data}:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      init-system:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO initialization
  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/raw-videos --ignore-existing;
      /usr/bin/mc mb myminio/frames --ignore-existing;
      /usr/bin/mc mb myminio/processed-frames --ignore-existing;
      /usr/bin/mc mb myminio/models --ignore-existing;
      exit 0;
      "

  # Reconstruction service
  reconstruction:
    image: e2e3d-colmap:latest
    platform: ${DOCKER_PLATFORM:-linux/arm64}
    volumes:
      - ${DATA_DIR:-./data}:/app/data
      - ./src:/app/src
    depends_on:
      - minio
      - init-system
      - build-colmap
    environment:
      - MINIO_SERVER=minio:9000
      - MINIO_USER=minioadmin
      - MINIO_PASSWORD=minioadmin
      - USE_GPU=${USE_GPU:-auto}
      - QUALITY_PRESET=${QUALITY_PRESET:-medium}
      - PYTHONPATH=/app:/app/src
      - PYTHONWARNINGS="ignore::DeprecationWarning"
    command: python3 reconstruct.py --help

volumes:
  postgres-db-volume:
