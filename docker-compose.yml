services:
  airflow-webserver:
    image: apache/airflow:2.6.3
    platform: ${DOCKER_PLATFORM:-linux/arm64}
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - PROJECT_PATH=/opt/airflow/data
      - COLMAP_PATH=colmap
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/logs:/opt/airflow/logs
      - ${DATA_DIR:-./data}:/opt/airflow/data
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      init-system:
        condition: service_completed_successfully
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    image: apache/airflow:2.6.3
    platform: ${DOCKER_PLATFORM:-linux/arm64}
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - PROJECT_PATH=/opt/airflow/data
      - COLMAP_PATH=colmap
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/logs:/opt/airflow/logs
      - ${DATA_DIR:-./data}:/opt/airflow/data
    depends_on:
      postgres:
        condition: service_healthy
      init-system:
        condition: service_completed_successfully
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-init:
    image: apache/airflow:2.6.3
    platform: ${DOCKER_PLATFORM:-linux/arm64}
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: /bin/bash
    command: -c 'airflow db init && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com'

  init-system:
    image: alpine:latest
    volumes:
      - ./:/workspace
      - ${DATA_DIR:-./data}:/data
    entrypoint: /bin/sh
    command: >
      -c "
        echo 'Creating necessary directories...'
        mkdir -p /data/input /data/output /data/videos /workspace/airflow/dags /workspace/airflow/logs /workspace/airflow/plugins
        chmod -R 777 /data /workspace/airflow
        
        # Create a sample .env file if it doesn't exist
        if [ ! -f /workspace/.env ]; then
          echo 'Creating .env file...'
          echo 'DATA_DIR=./data' > /workspace/.env
          echo 'DOCKER_PLATFORM=linux/arm64' >> /workspace/.env
        fi
        
        echo 'System initialization complete!'
      "

  postgres:
    image: postgres:15-alpine
    platform: ${DOCKER_PLATFORM:-linux/arm64}
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2023-10-25T06-33-25Z
    platform: ${DOCKER_PLATFORM:-linux/arm64}
    container_name: e2e3d-minio-1
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_CONSOLE_ADDRESS=:9001
    volumes:
      - ${DATA_DIR:-./data}:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      init-system:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/raw-videos;
      /usr/bin/mc mb myminio/frames;
      /usr/bin/mc mb myminio/processed-frames;
      /usr/bin/mc mb myminio/models;
      exit 0;
      "

  photogrammetry:
    build:
      context: .
      dockerfile: Dockerfile.colmap
      args:
        - BASE_IMAGE=${BASE_IMAGE:-ubuntu:20.04}
    platform: ${DOCKER_PLATFORM:-linux/arm64}
    volumes:
      - ${DATA_DIR:-./data}:/data
      - ${DATA_DIR:-./data}:/app/data
    depends_on:
      - minio
      - init-system
    environment:
      - MINIO_SERVER=minio:9000
      - MINIO_USER=minioadmin
      - MINIO_PASSWORD=minioadmin

  spark-master:
    image: bitnami/spark:3.4.1
    platform: ${DOCKER_PLATFORM:-linux/arm64}
    container_name: spark-master
    ports:
      - "8081:8080"
      - "7077:7077"
    volumes:
      - ${DATA_DIR:-./data}:/data
    depends_on:
      - init-system
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no

  spark-worker:
    image: bitnami/spark:3.4.1
    platform: ${DOCKER_PLATFORM:-linux/arm64}
    depends_on:
      - spark-master
      - init-system
    volumes:
      - ${DATA_DIR:-./data}:/data
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no

volumes:
  postgres-db-volume:
